// <auto-generated />
using System;
using HRPotter.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace HRPotter.Migrations
{
    [DbContext(typeof(HRPotterContext))]
    partial class HRPotterContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("HRPotter.Models.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Companies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Microsoft"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Apple"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Google"
                        },
                        new
                        {
                            Id = 4,
                            Name = "EBR-IT"
                        });
                });

            modelBuilder.Entity("HRPotter.Models.JobApplication", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CvUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsStudent")
                        .HasColumnType("bit");

                    b.Property<int>("JobOfferId")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("JobOfferId");

                    b.ToTable("JobApplications");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "lorem ipsum lorem ipsum lorem ipsum lorem ipsum lorem ipsum",
                            Email = "johnson@nsa.gov",
                            FirstName = "Stefan",
                            IsStudent = false,
                            JobOfferId = 2,
                            LastName = "Johnson",
                            Status = 1
                        },
                        new
                        {
                            Id = 2,
                            Email = "smith@nsa.gov",
                            FirstName = "Bogdan",
                            IsStudent = false,
                            JobOfferId = 3,
                            LastName = "Smith",
                            Status = 1
                        },
                        new
                        {
                            Id = 3,
                            CvUrl = "https://www.google.com/",
                            Email = "miller@nsa.gov",
                            FirstName = "Ambroży",
                            IsStudent = true,
                            JobOfferId = 5,
                            LastName = "Miller",
                            Status = 1
                        },
                        new
                        {
                            Id = 4,
                            Email = "jones@nsa.gov",
                            FirstName = "Bogusław",
                            IsStudent = false,
                            JobOfferId = 6,
                            LastName = "Jones",
                            Phone = "555444333",
                            Status = 1
                        },
                        new
                        {
                            Id = 5,
                            Email = "wilson@nsa.gov",
                            FirstName = "Lech",
                            IsStudent = false,
                            JobOfferId = 1,
                            LastName = "Wilson",
                            Status = 1
                        },
                        new
                        {
                            Id = 6,
                            Email = "williams@nsa.gov",
                            FirstName = "Orfeusz",
                            IsStudent = false,
                            JobOfferId = 2,
                            LastName = "Williams",
                            Phone = "222333111",
                            Status = 1
                        });
                });

            modelBuilder.Entity("HRPotter.Models.JobOffer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JobTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SalaryFrom")
                        .HasColumnType("int");

                    b.Property<int?>("SalaryTo")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ValidUntil")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("JobOffers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CompanyId = 1,
                            Created = new DateTime(2019, 11, 4, 1, 25, 23, 297, DateTimeKind.Local).AddTicks(2087),
                            Description = "lorem ipsum lorem ipsum lorem ipsum lorem ipsum lorem ipsum lorem ipsum lorem ipsum lorem ipsum lorem ipsum lorem ipsum",
                            JobTitle = "Backend Developer",
                            Location = "Warsaw",
                            SalaryTo = 15000
                        },
                        new
                        {
                            Id = 2,
                            CompanyId = 2,
                            Created = new DateTime(2019, 11, 4, 1, 25, 23, 300, DateTimeKind.Local).AddTicks(3458),
                            Description = "lorem ipsum lorem ipsum lorem ipsum lorem ipsum lorem ipsum lorem ipsum lorem ipsum lorem ipsum lorem ipsum lorem ipsum",
                            JobTitle = "Frontend Developer",
                            Location = "Warsaw",
                            SalaryFrom = 10000,
                            ValidUntil = new DateTime(2019, 11, 14, 1, 25, 23, 300, DateTimeKind.Local).AddTicks(3528)
                        },
                        new
                        {
                            Id = 3,
                            CompanyId = 1,
                            Created = new DateTime(2019, 11, 4, 1, 25, 23, 300, DateTimeKind.Local).AddTicks(5052),
                            JobTitle = "Manager",
                            Location = "New York",
                            SalaryFrom = 15000,
                            SalaryTo = 25000,
                            ValidUntil = new DateTime(2019, 11, 9, 1, 25, 23, 300, DateTimeKind.Local).AddTicks(5069)
                        },
                        new
                        {
                            Id = 4,
                            CompanyId = 3,
                            Created = new DateTime(2019, 11, 4, 1, 25, 23, 300, DateTimeKind.Local).AddTicks(5096),
                            Description = "lorem ipsum lorem ipsum lorem ipsum lorem ipsum lorem ipsum lorem ipsum lorem ipsum lorem ipsum lorem ipsum lorem ipsum",
                            JobTitle = "Teacher",
                            Location = "Paris",
                            SalaryFrom = 10000,
                            SalaryTo = 15000
                        },
                        new
                        {
                            Id = 5,
                            CompanyId = 4,
                            Created = new DateTime(2019, 11, 4, 1, 25, 23, 300, DateTimeKind.Local).AddTicks(5111),
                            Description = "lorem ipsum lorem ipsum lorem ipsum lorem ipsum lorem ipsum lorem ipsum lorem ipsum lorem ipsum lorem ipsum lorem ipsum",
                            JobTitle = "Cook",
                            Location = "Venice",
                            SalaryFrom = 10000,
                            SalaryTo = 15000
                        },
                        new
                        {
                            Id = 6,
                            CompanyId = 1,
                            Created = new DateTime(2019, 11, 4, 1, 25, 23, 300, DateTimeKind.Local).AddTicks(5122),
                            JobTitle = "Manager",
                            Location = "Venice",
                            SalaryFrom = 15000,
                            SalaryTo = 25000
                        });
                });

            modelBuilder.Entity("HRPotter.Models.JobApplication", b =>
                {
                    b.HasOne("HRPotter.Models.JobOffer", "JobOffer")
                        .WithMany("JobApplications")
                        .HasForeignKey("JobOfferId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HRPotter.Models.JobOffer", b =>
                {
                    b.HasOne("HRPotter.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
